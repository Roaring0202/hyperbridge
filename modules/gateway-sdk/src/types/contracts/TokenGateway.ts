/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type AssetStruct = {
  erc20: AddressLike;
  erc6160: AddressLike;
  identifier: BytesLike;
};

export type AssetStructOutput = [
  erc20: string,
  erc6160: string,
  identifier: string
] & { erc20: string; erc6160: string; identifier: string };

export type InitParamsStruct = {
  host: AddressLike;
  uniswapV2Router: AddressLike;
  hyperbridge: BytesLike;
  relayerFeePercentage: BigNumberish;
  protocolFeePercentage: BigNumberish;
  assets: AssetStruct[];
  callDispatcher: AddressLike;
};

export type InitParamsStructOutput = [
  host: string,
  uniswapV2Router: string,
  hyperbridge: string,
  relayerFeePercentage: bigint,
  protocolFeePercentage: bigint,
  assets: AssetStructOutput[],
  callDispatcher: string
] & {
  host: string;
  uniswapV2Router: string;
  hyperbridge: string;
  relayerFeePercentage: bigint;
  protocolFeePercentage: bigint;
  assets: AssetStructOutput[];
  callDispatcher: string;
};

export type PostRequestStruct = {
  source: BytesLike;
  dest: BytesLike;
  nonce: BigNumberish;
  from: BytesLike;
  to: BytesLike;
  timeoutTimestamp: BigNumberish;
  body: BytesLike;
};

export type PostRequestStructOutput = [
  source: string,
  dest: string,
  nonce: bigint,
  from: string,
  to: string,
  timeoutTimestamp: bigint,
  body: string
] & {
  source: string;
  dest: string;
  nonce: bigint;
  from: string;
  to: string;
  timeoutTimestamp: bigint;
  body: string;
};

export type GetRequestStruct = {
  source: BytesLike;
  dest: BytesLike;
  nonce: BigNumberish;
  from: BytesLike;
  timeoutTimestamp: BigNumberish;
  keys: BytesLike[];
  height: BigNumberish;
};

export type GetRequestStructOutput = [
  source: string,
  dest: string,
  nonce: bigint,
  from: string,
  timeoutTimestamp: bigint,
  keys: string[],
  height: bigint
] & {
  source: string;
  dest: string;
  nonce: bigint;
  from: string;
  timeoutTimestamp: bigint;
  keys: string[];
  height: bigint;
};

export type StorageValueStruct = { key: BytesLike; value: BytesLike };

export type StorageValueStructOutput = [key: string, value: string] & {
  key: string;
  value: string;
};

export type GetResponseStruct = {
  request: GetRequestStruct;
  values: StorageValueStruct[];
};

export type GetResponseStructOutput = [
  request: GetRequestStructOutput,
  values: StorageValueStructOutput[]
] & { request: GetRequestStructOutput; values: StorageValueStructOutput[] };

export type PostResponseStruct = {
  request: PostRequestStruct;
  response: BytesLike;
  timeoutTimestamp: BigNumberish;
};

export type PostResponseStructOutput = [
  request: PostRequestStructOutput,
  response: string,
  timeoutTimestamp: bigint
] & {
  request: PostRequestStructOutput;
  response: string;
  timeoutTimestamp: bigint;
};

export type TeleportParamsStruct = {
  amount: BigNumberish;
  fee: BigNumberish;
  assetId: BytesLike;
  redeem: boolean;
  to: BytesLike;
  feeToken: AddressLike;
  dest: BytesLike;
  timeout: BigNumberish;
  data: BytesLike;
  amountInMax: BigNumberish;
};

export type TeleportParamsStructOutput = [
  amount: bigint,
  fee: bigint,
  assetId: string,
  redeem: boolean,
  to: string,
  feeToken: string,
  dest: string,
  timeout: bigint,
  data: string,
  amountInMax: bigint
] & {
  amount: bigint;
  fee: bigint;
  assetId: string;
  redeem: boolean;
  to: string;
  feeToken: string;
  dest: string;
  timeout: bigint;
  data: string;
  amountInMax: bigint;
};

export interface TokenGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "init"
      | "onAccept"
      | "onGetResponse"
      | "onGetTimeout"
      | "onPostRequestTimeout"
      | "onPostResponse"
      | "onPostResponseTimeout"
      | "teleport"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AssetReceived" | "LiquidityProvided" | "Teleport"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "init",
    values: [InitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onAccept",
    values: [PostRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onGetResponse",
    values: [GetResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onGetTimeout",
    values: [GetRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onPostRequestTimeout",
    values: [PostRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onPostResponse",
    values: [PostResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onPostResponseTimeout",
    values: [PostResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "teleport",
    values: [TeleportParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onAccept", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onGetResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onGetTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onPostRequestTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onPostResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onPostResponseTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teleport", data: BytesLike): Result;
}

export namespace AssetReceivedEvent {
  export type InputTuple = [source: BytesLike, nonce: BigNumberish];
  export type OutputTuple = [source: string, nonce: bigint];
  export interface OutputObject {
    source: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityProvidedEvent {
  export type InputTuple = [relayer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [relayer: string, amount: bigint];
  export interface OutputObject {
    relayer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeleportEvent {
  export type InputTuple = [
    from: BytesLike,
    to: BytesLike,
    amount: BigNumberish,
    redeem: boolean,
    requestCommitment: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    redeem: boolean,
    requestCommitment: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    redeem: boolean;
    requestCommitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenGateway extends BaseContract {
  connect(runner?: ContractRunner | null): TokenGateway;
  waitForDeployment(): Promise<this>;

  interface: TokenGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  init: TypedContractMethod<
    [initialParams: InitParamsStruct],
    [void],
    "nonpayable"
  >;

  onAccept: TypedContractMethod<
    [request: PostRequestStruct],
    [void],
    "nonpayable"
  >;

  onGetResponse: TypedContractMethod<
    [arg0: GetResponseStruct],
    [void],
    "nonpayable"
  >;

  onGetTimeout: TypedContractMethod<
    [arg0: GetRequestStruct],
    [void],
    "nonpayable"
  >;

  onPostRequestTimeout: TypedContractMethod<
    [request: PostRequestStruct],
    [void],
    "nonpayable"
  >;

  onPostResponse: TypedContractMethod<
    [arg0: PostResponseStruct],
    [void],
    "nonpayable"
  >;

  onPostResponseTimeout: TypedContractMethod<
    [arg0: PostResponseStruct],
    [void],
    "nonpayable"
  >;

  teleport: TypedContractMethod<
    [params: TeleportParamsStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [initialParams: InitParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onAccept"
  ): TypedContractMethod<[request: PostRequestStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onGetResponse"
  ): TypedContractMethod<[arg0: GetResponseStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onGetTimeout"
  ): TypedContractMethod<[arg0: GetRequestStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onPostRequestTimeout"
  ): TypedContractMethod<[request: PostRequestStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onPostResponse"
  ): TypedContractMethod<[arg0: PostResponseStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onPostResponseTimeout"
  ): TypedContractMethod<[arg0: PostResponseStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "teleport"
  ): TypedContractMethod<[params: TeleportParamsStruct], [void], "nonpayable">;

  getEvent(
    key: "AssetReceived"
  ): TypedContractEvent<
    AssetReceivedEvent.InputTuple,
    AssetReceivedEvent.OutputTuple,
    AssetReceivedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityProvided"
  ): TypedContractEvent<
    LiquidityProvidedEvent.InputTuple,
    LiquidityProvidedEvent.OutputTuple,
    LiquidityProvidedEvent.OutputObject
  >;
  getEvent(
    key: "Teleport"
  ): TypedContractEvent<
    TeleportEvent.InputTuple,
    TeleportEvent.OutputTuple,
    TeleportEvent.OutputObject
  >;

  filters: {
    "AssetReceived(bytes,uint256)": TypedContractEvent<
      AssetReceivedEvent.InputTuple,
      AssetReceivedEvent.OutputTuple,
      AssetReceivedEvent.OutputObject
    >;
    AssetReceived: TypedContractEvent<
      AssetReceivedEvent.InputTuple,
      AssetReceivedEvent.OutputTuple,
      AssetReceivedEvent.OutputObject
    >;

    "LiquidityProvided(address,uint256)": TypedContractEvent<
      LiquidityProvidedEvent.InputTuple,
      LiquidityProvidedEvent.OutputTuple,
      LiquidityProvidedEvent.OutputObject
    >;
    LiquidityProvided: TypedContractEvent<
      LiquidityProvidedEvent.InputTuple,
      LiquidityProvidedEvent.OutputTuple,
      LiquidityProvidedEvent.OutputObject
    >;

    "Teleport(bytes32,bytes32,uint256,bool,bytes32)": TypedContractEvent<
      TeleportEvent.InputTuple,
      TeleportEvent.OutputTuple,
      TeleportEvent.OutputObject
    >;
    Teleport: TypedContractEvent<
      TeleportEvent.InputTuple,
      TeleportEvent.OutputTuple,
      TeleportEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "CallDispatcher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallDispatcher__factory>;
    getContractFactory(
      name: "ICallDispatcher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICallDispatcher__factory>;
    getContractFactory(
      name: "IUniswapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router__factory>;
    getContractFactory(
      name: "TokenGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenGateway__factory>;
    getContractFactory(
      name: "IERC5679Ext20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5679Ext20__factory>;
    getContractFactory(
      name: "IERC6160Ext20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC6160Ext20__factory>;
    getContractFactory(
      name: "IERC_ACL_CORE",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC_ACL_CORE__factory>;
    getContractFactory(
      name: "IConsensusClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConsensusClient__factory>;
    getContractFactory(
      name: "IDispatcher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDispatcher__factory>;
    getContractFactory(
      name: "IIsmpHost",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsmpHost__factory>;
    getContractFactory(
      name: "BaseIsmpModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseIsmpModule__factory>;
    getContractFactory(
      name: "IIsmpModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsmpModule__factory>;
    getContractFactory(
      name: "StateMachine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StateMachine__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "MerklePatricia",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerklePatricia__factory>;
    getContractFactory(
      name: "EthereumTrieDB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumTrieDB__factory>;
    getContractFactory(
      name: "SubstrateTrieDB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SubstrateTrieDB__factory>;

    getContractAt(
      name: "CallDispatcher",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CallDispatcher>;
    getContractAt(
      name: "ICallDispatcher",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICallDispatcher>;
    getContractAt(
      name: "IUniswapV2Router",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router>;
    getContractAt(
      name: "TokenGateway",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenGateway>;
    getContractAt(
      name: "IERC5679Ext20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5679Ext20>;
    getContractAt(
      name: "IERC6160Ext20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC6160Ext20>;
    getContractAt(
      name: "IERC_ACL_CORE",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC_ACL_CORE>;
    getContractAt(
      name: "IConsensusClient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IConsensusClient>;
    getContractAt(
      name: "IDispatcher",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDispatcher>;
    getContractAt(
      name: "IIsmpHost",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsmpHost>;
    getContractAt(
      name: "BaseIsmpModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseIsmpModule>;
    getContractAt(
      name: "IIsmpModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsmpModule>;
    getContractAt(
      name: "StateMachine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StateMachine>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "MerklePatricia",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MerklePatricia>;
    getContractAt(
      name: "EthereumTrieDB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumTrieDB>;
    getContractAt(
      name: "SubstrateTrieDB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SubstrateTrieDB>;

    deployContract(
      name: "CallDispatcher",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CallDispatcher>;
    deployContract(
      name: "ICallDispatcher",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICallDispatcher>;
    deployContract(
      name: "IUniswapV2Router",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router>;
    deployContract(
      name: "TokenGateway",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenGateway>;
    deployContract(
      name: "IERC5679Ext20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5679Ext20>;
    deployContract(
      name: "IERC6160Ext20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC6160Ext20>;
    deployContract(
      name: "IERC_ACL_CORE",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC_ACL_CORE>;
    deployContract(
      name: "IConsensusClient",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IConsensusClient>;
    deployContract(
      name: "IDispatcher",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDispatcher>;
    deployContract(
      name: "IIsmpHost",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIsmpHost>;
    deployContract(
      name: "BaseIsmpModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseIsmpModule>;
    deployContract(
      name: "IIsmpModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIsmpModule>;
    deployContract(
      name: "StateMachine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StateMachine>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MerklePatricia",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerklePatricia>;
    deployContract(
      name: "EthereumTrieDB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EthereumTrieDB>;
    deployContract(
      name: "SubstrateTrieDB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubstrateTrieDB>;

    deployContract(
      name: "CallDispatcher",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CallDispatcher>;
    deployContract(
      name: "ICallDispatcher",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICallDispatcher>;
    deployContract(
      name: "IUniswapV2Router",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router>;
    deployContract(
      name: "TokenGateway",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenGateway>;
    deployContract(
      name: "IERC5679Ext20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5679Ext20>;
    deployContract(
      name: "IERC6160Ext20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC6160Ext20>;
    deployContract(
      name: "IERC_ACL_CORE",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC_ACL_CORE>;
    deployContract(
      name: "IConsensusClient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IConsensusClient>;
    deployContract(
      name: "IDispatcher",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDispatcher>;
    deployContract(
      name: "IIsmpHost",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIsmpHost>;
    deployContract(
      name: "BaseIsmpModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseIsmpModule>;
    deployContract(
      name: "IIsmpModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIsmpModule>;
    deployContract(
      name: "StateMachine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StateMachine>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MerklePatricia",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerklePatricia>;
    deployContract(
      name: "EthereumTrieDB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EthereumTrieDB>;
    deployContract(
      name: "SubstrateTrieDB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubstrateTrieDB>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}

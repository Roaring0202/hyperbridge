/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type ByteSliceStruct = { data: BytesLike; offset: BigNumberish };

export type ByteSliceStructOutput = [data: string, offset: bigint] & {
  data: string;
  offset: bigint;
};

export type NodeKindStruct = {
  isEmpty: boolean;
  isLeaf: boolean;
  isHashedLeaf: boolean;
  isNibbledValueBranch: boolean;
  isNibbledHashedValueBranch: boolean;
  isNibbledBranch: boolean;
  isExtension: boolean;
  isBranch: boolean;
  nibbleSize: BigNumberish;
  data: ByteSliceStruct;
};

export type NodeKindStructOutput = [
  isEmpty: boolean,
  isLeaf: boolean,
  isHashedLeaf: boolean,
  isNibbledValueBranch: boolean,
  isNibbledHashedValueBranch: boolean,
  isNibbledBranch: boolean,
  isExtension: boolean,
  isBranch: boolean,
  nibbleSize: bigint,
  data: ByteSliceStructOutput
] & {
  isEmpty: boolean;
  isLeaf: boolean;
  isHashedLeaf: boolean;
  isNibbledValueBranch: boolean;
  isNibbledHashedValueBranch: boolean;
  isNibbledBranch: boolean;
  isExtension: boolean;
  isBranch: boolean;
  nibbleSize: bigint;
  data: ByteSliceStructOutput;
};

export type NodeHandleStruct = {
  isHash: boolean;
  hash: BytesLike;
  isInline: boolean;
  inLine: BytesLike;
};

export type NodeHandleStructOutput = [
  isHash: boolean,
  hash: string,
  isInline: boolean,
  inLine: string
] & { isHash: boolean; hash: string; isInline: boolean; inLine: string };

export type NodeHandleOptionStruct = {
  isSome: boolean;
  value: NodeHandleStruct;
};

export type NodeHandleOptionStructOutput = [
  isSome: boolean,
  value: NodeHandleStructOutput
] & { isSome: boolean; value: NodeHandleStructOutput };

export type BranchStruct = {
  value: NodeHandleOptionStruct;
  children: NodeHandleOptionStruct[];
};

export type BranchStructOutput = [
  value: NodeHandleOptionStructOutput,
  children: NodeHandleOptionStructOutput[]
] & {
  value: NodeHandleOptionStructOutput;
  children: NodeHandleOptionStructOutput[];
};

export type NibbleSliceStruct = { data: BytesLike; offset: BigNumberish };

export type NibbleSliceStructOutput = [data: string, offset: bigint] & {
  data: string;
  offset: bigint;
};

export type ExtensionStruct = {
  key: NibbleSliceStruct;
  node: NodeHandleStruct;
};

export type ExtensionStructOutput = [
  key: NibbleSliceStructOutput,
  node: NodeHandleStructOutput
] & { key: NibbleSliceStructOutput; node: NodeHandleStructOutput };

export type LeafStruct = { key: NibbleSliceStruct; value: NodeHandleStruct };

export type LeafStructOutput = [
  key: NibbleSliceStructOutput,
  value: NodeHandleStructOutput
] & { key: NibbleSliceStructOutput; value: NodeHandleStructOutput };

export interface EthereumTrieDBInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decodeBranch"
      | "decodeExtension"
      | "decodeLeaf"
      | "decodeNodeKind"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decodeBranch",
    values: [NodeKindStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeExtension",
    values: [NodeKindStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeLeaf",
    values: [NodeKindStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeNodeKind",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeBranch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decodeLeaf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeNodeKind",
    data: BytesLike
  ): Result;
}

export interface EthereumTrieDB extends BaseContract {
  connect(runner?: ContractRunner | null): EthereumTrieDB;
  waitForDeployment(): Promise<this>;

  interface: EthereumTrieDBInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decodeBranch: TypedContractMethod<
    [node: NodeKindStruct],
    [BranchStructOutput],
    "view"
  >;

  decodeExtension: TypedContractMethod<
    [node: NodeKindStruct],
    [ExtensionStructOutput],
    "view"
  >;

  decodeLeaf: TypedContractMethod<
    [node: NodeKindStruct],
    [LeafStructOutput],
    "view"
  >;

  decodeNodeKind: TypedContractMethod<
    [encoded: BytesLike],
    [NodeKindStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decodeBranch"
  ): TypedContractMethod<[node: NodeKindStruct], [BranchStructOutput], "view">;
  getFunction(
    nameOrSignature: "decodeExtension"
  ): TypedContractMethod<
    [node: NodeKindStruct],
    [ExtensionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "decodeLeaf"
  ): TypedContractMethod<[node: NodeKindStruct], [LeafStructOutput], "view">;
  getFunction(
    nameOrSignature: "decodeNodeKind"
  ): TypedContractMethod<[encoded: BytesLike], [NodeKindStructOutput], "view">;

  filters: {};
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type DispatchGetStruct = {
  dest: BytesLike;
  height: BigNumberish;
  keys: BytesLike[];
  timeout: BigNumberish;
  fee: BigNumberish;
  payer: AddressLike;
};

export type DispatchGetStructOutput = [
  dest: string,
  height: bigint,
  keys: string[],
  timeout: bigint,
  fee: bigint,
  payer: string
] & {
  dest: string;
  height: bigint;
  keys: string[];
  timeout: bigint;
  fee: bigint;
  payer: string;
};

export type PostRequestStruct = {
  source: BytesLike;
  dest: BytesLike;
  nonce: BigNumberish;
  from: BytesLike;
  to: BytesLike;
  timeoutTimestamp: BigNumberish;
  body: BytesLike;
};

export type PostRequestStructOutput = [
  source: string,
  dest: string,
  nonce: bigint,
  from: string,
  to: string,
  timeoutTimestamp: bigint,
  body: string
] & {
  source: string;
  dest: string;
  nonce: bigint;
  from: string;
  to: string;
  timeoutTimestamp: bigint;
  body: string;
};

export type DispatchPostResponseStruct = {
  request: PostRequestStruct;
  response: BytesLike;
  timeout: BigNumberish;
  fee: BigNumberish;
  payer: AddressLike;
};

export type DispatchPostResponseStructOutput = [
  request: PostRequestStructOutput,
  response: string,
  timeout: bigint,
  fee: bigint,
  payer: string
] & {
  request: PostRequestStructOutput;
  response: string;
  timeout: bigint;
  fee: bigint;
  payer: string;
};

export type DispatchPostStruct = {
  dest: BytesLike;
  to: BytesLike;
  body: BytesLike;
  timeout: BigNumberish;
  fee: BigNumberish;
  payer: AddressLike;
};

export type DispatchPostStructOutput = [
  dest: string,
  to: string,
  body: string,
  timeout: bigint,
  fee: bigint,
  payer: string
] & {
  dest: string;
  to: string;
  body: string;
  timeout: bigint;
  fee: bigint;
  payer: string;
};

export type PostResponseStruct = {
  request: PostRequestStruct;
  response: BytesLike;
  timeoutTimestamp: BigNumberish;
};

export type PostResponseStructOutput = [
  request: PostRequestStructOutput,
  response: string,
  timeoutTimestamp: bigint
] & {
  request: PostRequestStructOutput;
  response: string;
  timeoutTimestamp: bigint;
};

export type FeeMetadataStruct = { fee: BigNumberish; sender: AddressLike };

export type FeeMetadataStructOutput = [fee: bigint, sender: string] & {
  fee: bigint;
  sender: string;
};

export type GetRequestStruct = {
  source: BytesLike;
  dest: BytesLike;
  nonce: BigNumberish;
  from: BytesLike;
  timeoutTimestamp: BigNumberish;
  keys: BytesLike[];
  height: BigNumberish;
};

export type GetRequestStructOutput = [
  source: string,
  dest: string,
  nonce: bigint,
  from: string,
  timeoutTimestamp: bigint,
  keys: string[],
  height: bigint
] & {
  source: string;
  dest: string;
  nonce: bigint;
  from: string;
  timeoutTimestamp: bigint;
  keys: string[];
  height: bigint;
};

export type StorageValueStruct = { key: BytesLike; value: BytesLike };

export type StorageValueStructOutput = [key: string, value: string] & {
  key: string;
  value: string;
};

export type GetResponseStruct = {
  request: GetRequestStruct;
  values: StorageValueStruct[];
};

export type GetResponseStructOutput = [
  request: GetRequestStructOutput,
  values: StorageValueStructOutput[]
] & { request: GetRequestStructOutput; values: StorageValueStructOutput[] };

export type ResponseReceiptStruct = {
  responseCommitment: BytesLike;
  relayer: AddressLike;
};

export type ResponseReceiptStructOutput = [
  responseCommitment: string,
  relayer: string
] & { responseCommitment: string; relayer: string };

export type StateMachineHeightStruct = {
  stateMachineId: BigNumberish;
  height: BigNumberish;
};

export type StateMachineHeightStructOutput = [
  stateMachineId: bigint,
  height: bigint
] & { stateMachineId: bigint; height: bigint };

export type StateCommitmentStruct = {
  timestamp: BigNumberish;
  overlayRoot: BytesLike;
  stateRoot: BytesLike;
};

export type StateCommitmentStructOutput = [
  timestamp: bigint,
  overlayRoot: string,
  stateRoot: string
] & { timestamp: bigint; overlayRoot: string; stateRoot: string };

export interface IIsmpHostInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "challengePeriod"
      | "consensusClient"
      | "consensusState"
      | "consensusUpdateTime"
      | "dispatch((bytes,uint64,bytes[],uint64,uint256,address))"
      | "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))"
      | "dispatch((bytes,bytes,bytes,uint64,uint256,address))"
      | "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64))"
      | "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)"
      | "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)"
      | "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes))"
      | "dispatchIncoming((bytes,bytes,uint64,bytes,uint64,bytes[],uint64),(uint256,address),bytes32)"
      | "dispatchIncoming(((bytes,bytes,uint64,bytes,uint64,bytes[],uint64),(bytes,bytes)[]),(uint256,address))"
      | "feeToken"
      | "frozen"
      | "host"
      | "latestStateMachineHeight"
      | "perByteFee"
      | "requestCommitments"
      | "requestReceipts"
      | "responseCommitments"
      | "responseReceipts"
      | "stateMachineCommitment"
      | "stateMachineCommitmentUpdateTime"
      | "storeConsensusState"
      | "storeConsensusUpdateTime"
      | "storeLatestStateMachineHeight"
      | "storeStateMachineCommitment"
      | "storeStateMachineCommitmentUpdateTime"
      | "timestamp"
      | "unStakingPeriod"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "challengePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consensusClient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consensusState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consensusUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dispatch((bytes,uint64,bytes[],uint64,uint256,address))",
    values: [DispatchGetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))",
    values: [DispatchPostResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatch((bytes,bytes,bytes,uint64,uint256,address))",
    values: [DispatchPostStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64))",
    values: [PostResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)",
    values: [PostResponseStruct, FeeMetadataStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)",
    values: [PostRequestStruct, FeeMetadataStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes))",
    values: [PostRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchIncoming((bytes,bytes,uint64,bytes,uint64,bytes[],uint64),(uint256,address),bytes32)",
    values: [GetRequestStruct, FeeMetadataStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchIncoming(((bytes,bytes,uint64,bytes,uint64,bytes[],uint64),(bytes,bytes)[]),(uint256,address))",
    values: [GetResponseStruct, FeeMetadataStruct]
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(functionFragment: "host", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "latestStateMachineHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "perByteFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCommitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReceipts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "responseCommitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "responseReceipts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stateMachineCommitment",
    values: [StateMachineHeightStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "stateMachineCommitmentUpdateTime",
    values: [StateMachineHeightStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "storeConsensusState",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "storeConsensusUpdateTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeLatestStateMachineHeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeStateMachineCommitment",
    values: [StateMachineHeightStruct, StateCommitmentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "storeStateMachineCommitmentUpdateTime",
    values: [StateMachineHeightStruct, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unStakingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatch((bytes,uint64,bytes[],uint64,uint256,address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatch((bytes,bytes,bytes,uint64,uint256,address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchIncoming((bytes,bytes,uint64,bytes,uint64,bytes[],uint64),(uint256,address),bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchIncoming(((bytes,bytes,uint64,bytes,uint64,bytes[],uint64),(bytes,bytes)[]),(uint256,address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "host", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestStateMachineHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "perByteFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "responseCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "responseReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateMachineCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateMachineCommitmentUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeConsensusState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeConsensusUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeLatestStateMachineHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeStateMachineCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeStateMachineCommitmentUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unStakingPeriod",
    data: BytesLike
  ): Result;
}

export interface IIsmpHost extends BaseContract {
  connect(runner?: ContractRunner | null): IIsmpHost;
  waitForDeployment(): Promise<this>;

  interface: IIsmpHostInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "nonpayable">;

  challengePeriod: TypedContractMethod<[], [bigint], "view">;

  consensusClient: TypedContractMethod<[], [string], "view">;

  consensusState: TypedContractMethod<[], [string], "view">;

  consensusUpdateTime: TypedContractMethod<[], [bigint], "view">;

  "dispatch((bytes,uint64,bytes[],uint64,uint256,address))": TypedContractMethod<
    [request: DispatchGetStruct],
    [string],
    "nonpayable"
  >;

  "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))": TypedContractMethod<
    [response: DispatchPostResponseStruct],
    [string],
    "nonpayable"
  >;

  "dispatch((bytes,bytes,bytes,uint64,uint256,address))": TypedContractMethod<
    [request: DispatchPostStruct],
    [string],
    "nonpayable"
  >;

  "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64))": TypedContractMethod<
    [response: PostResponseStruct],
    [void],
    "nonpayable"
  >;

  "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)": TypedContractMethod<
    [
      timeout: PostResponseStruct,
      meta: FeeMetadataStruct,
      commitment: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)": TypedContractMethod<
    [
      timeout: PostRequestStruct,
      meta: FeeMetadataStruct,
      commitment: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes))": TypedContractMethod<
    [request: PostRequestStruct],
    [void],
    "nonpayable"
  >;

  "dispatchIncoming((bytes,bytes,uint64,bytes,uint64,bytes[],uint64),(uint256,address),bytes32)": TypedContractMethod<
    [timeout: GetRequestStruct, meta: FeeMetadataStruct, commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  "dispatchIncoming(((bytes,bytes,uint64,bytes,uint64,bytes[],uint64),(bytes,bytes)[]),(uint256,address))": TypedContractMethod<
    [response: GetResponseStruct, meta: FeeMetadataStruct],
    [void],
    "nonpayable"
  >;

  feeToken: TypedContractMethod<[], [string], "view">;

  frozen: TypedContractMethod<[], [boolean], "view">;

  host: TypedContractMethod<[], [string], "view">;

  latestStateMachineHeight: TypedContractMethod<[], [bigint], "view">;

  perByteFee: TypedContractMethod<[], [bigint], "view">;

  requestCommitments: TypedContractMethod<
    [commitment: BytesLike],
    [FeeMetadataStructOutput],
    "view"
  >;

  requestReceipts: TypedContractMethod<
    [commitment: BytesLike],
    [string],
    "view"
  >;

  responseCommitments: TypedContractMethod<
    [commitment: BytesLike],
    [FeeMetadataStructOutput],
    "view"
  >;

  responseReceipts: TypedContractMethod<
    [commitment: BytesLike],
    [ResponseReceiptStructOutput],
    "view"
  >;

  stateMachineCommitment: TypedContractMethod<
    [height: StateMachineHeightStruct],
    [StateCommitmentStructOutput],
    "nonpayable"
  >;

  stateMachineCommitmentUpdateTime: TypedContractMethod<
    [height: StateMachineHeightStruct],
    [bigint],
    "nonpayable"
  >;

  storeConsensusState: TypedContractMethod<
    [state: BytesLike],
    [void],
    "nonpayable"
  >;

  storeConsensusUpdateTime: TypedContractMethod<
    [timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  storeLatestStateMachineHeight: TypedContractMethod<
    [height: BigNumberish],
    [void],
    "nonpayable"
  >;

  storeStateMachineCommitment: TypedContractMethod<
    [height: StateMachineHeightStruct, commitment: StateCommitmentStruct],
    [void],
    "nonpayable"
  >;

  storeStateMachineCommitmentUpdateTime: TypedContractMethod<
    [height: StateMachineHeightStruct, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  timestamp: TypedContractMethod<[], [bigint], "view">;

  unStakingPeriod: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "challengePeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "consensusClient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "consensusState"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "consensusUpdateTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dispatch((bytes,uint64,bytes[],uint64,uint256,address))"
  ): TypedContractMethod<[request: DispatchGetStruct], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))"
  ): TypedContractMethod<
    [response: DispatchPostResponseStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dispatch((bytes,bytes,bytes,uint64,uint256,address))"
  ): TypedContractMethod<[request: DispatchPostStruct], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64))"
  ): TypedContractMethod<[response: PostResponseStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)"
  ): TypedContractMethod<
    [
      timeout: PostResponseStruct,
      meta: FeeMetadataStruct,
      commitment: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)"
  ): TypedContractMethod<
    [
      timeout: PostRequestStruct,
      meta: FeeMetadataStruct,
      commitment: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes))"
  ): TypedContractMethod<[request: PostRequestStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dispatchIncoming((bytes,bytes,uint64,bytes,uint64,bytes[],uint64),(uint256,address),bytes32)"
  ): TypedContractMethod<
    [timeout: GetRequestStruct, meta: FeeMetadataStruct, commitment: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dispatchIncoming(((bytes,bytes,uint64,bytes,uint64,bytes[],uint64),(bytes,bytes)[]),(uint256,address))"
  ): TypedContractMethod<
    [response: GetResponseStruct, meta: FeeMetadataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "frozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "host"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "latestStateMachineHeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "perByteFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestCommitments"
  ): TypedContractMethod<
    [commitment: BytesLike],
    [FeeMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "requestReceipts"
  ): TypedContractMethod<[commitment: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "responseCommitments"
  ): TypedContractMethod<
    [commitment: BytesLike],
    [FeeMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "responseReceipts"
  ): TypedContractMethod<
    [commitment: BytesLike],
    [ResponseReceiptStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "stateMachineCommitment"
  ): TypedContractMethod<
    [height: StateMachineHeightStruct],
    [StateCommitmentStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stateMachineCommitmentUpdateTime"
  ): TypedContractMethod<
    [height: StateMachineHeightStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "storeConsensusState"
  ): TypedContractMethod<[state: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storeConsensusUpdateTime"
  ): TypedContractMethod<[timestamp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storeLatestStateMachineHeight"
  ): TypedContractMethod<[height: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storeStateMachineCommitment"
  ): TypedContractMethod<
    [height: StateMachineHeightStruct, commitment: StateCommitmentStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "storeStateMachineCommitmentUpdateTime"
  ): TypedContractMethod<
    [height: StateMachineHeightStruct, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unStakingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}

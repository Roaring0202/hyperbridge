/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IConsensusClient,
  IConsensusClientInterface,
} from "../../ismp/IConsensusClient";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "trustedState",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "verifyConsensus",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "stateMachineId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "height",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "overlayRoot",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "stateRoot",
                type: "bytes32",
              },
            ],
            internalType: "struct StateCommitment",
            name: "commitment",
            type: "tuple",
          },
        ],
        internalType: "struct IntermediateState",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IConsensusClient__factory {
  static readonly abi = _abi;
  static createInterface(): IConsensusClientInterface {
    return new Interface(_abi) as IConsensusClientInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IConsensusClient {
    return new Contract(address, _abi, runner) as unknown as IConsensusClient;
  }
}

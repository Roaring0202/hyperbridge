/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface SubstrateTrieDBInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALT_HASHING_BRANCH_WITH_MASK"
      | "ALT_HASHING_LEAF_PREFIX_MASK"
      | "BITMAP_LENGTH"
      | "BRANCH_WITHOUT_MASK"
      | "BRANCH_WITH_MASK"
      | "EMPTY_TRIE"
      | "FIRST_PREFIX"
      | "HASH_lENGTH"
      | "LEAF_PREFIX_MASK"
      | "NIBBLE_PER_BYTE"
      | "NIBBLE_SIZE_BOUND"
      | "PADDING_BITMASK"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ALT_HASHING_BRANCH_WITH_MASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ALT_HASHING_LEAF_PREFIX_MASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BITMAP_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRANCH_WITHOUT_MASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRANCH_WITH_MASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMPTY_TRIE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FIRST_PREFIX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HASH_lENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEAF_PREFIX_MASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NIBBLE_PER_BYTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NIBBLE_SIZE_BOUND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PADDING_BITMASK",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ALT_HASHING_BRANCH_WITH_MASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ALT_HASHING_LEAF_PREFIX_MASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BITMAP_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BRANCH_WITHOUT_MASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BRANCH_WITH_MASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "EMPTY_TRIE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FIRST_PREFIX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HASH_lENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEAF_PREFIX_MASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NIBBLE_PER_BYTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NIBBLE_SIZE_BOUND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PADDING_BITMASK",
    data: BytesLike
  ): Result;
}

export interface SubstrateTrieDB extends BaseContract {
  connect(runner?: ContractRunner | null): SubstrateTrieDB;
  waitForDeployment(): Promise<this>;

  interface: SubstrateTrieDBInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ALT_HASHING_BRANCH_WITH_MASK: TypedContractMethod<[], [bigint], "view">;

  ALT_HASHING_LEAF_PREFIX_MASK: TypedContractMethod<[], [bigint], "view">;

  BITMAP_LENGTH: TypedContractMethod<[], [bigint], "view">;

  BRANCH_WITHOUT_MASK: TypedContractMethod<[], [bigint], "view">;

  BRANCH_WITH_MASK: TypedContractMethod<[], [bigint], "view">;

  EMPTY_TRIE: TypedContractMethod<[], [bigint], "view">;

  FIRST_PREFIX: TypedContractMethod<[], [bigint], "view">;

  HASH_lENGTH: TypedContractMethod<[], [bigint], "view">;

  LEAF_PREFIX_MASK: TypedContractMethod<[], [bigint], "view">;

  NIBBLE_PER_BYTE: TypedContractMethod<[], [bigint], "view">;

  NIBBLE_SIZE_BOUND: TypedContractMethod<[], [bigint], "view">;

  PADDING_BITMASK: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ALT_HASHING_BRANCH_WITH_MASK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ALT_HASHING_LEAF_PREFIX_MASK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BITMAP_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BRANCH_WITHOUT_MASK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BRANCH_WITH_MASK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EMPTY_TRIE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FIRST_PREFIX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HASH_lENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LEAF_PREFIX_MASK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NIBBLE_PER_BYTE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NIBBLE_SIZE_BOUND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PADDING_BITMASK"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}

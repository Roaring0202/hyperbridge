/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type StorageValueStruct = { key: BytesLike; value: BytesLike };

export type StorageValueStructOutput = [key: string, value: string] & {
  key: string;
  value: string;
};

export interface MerklePatriciaInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ReadChildProofCheck"
      | "VerifyEthereumProof"
      | "VerifySubstrateProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ReadChildProofCheck",
    values: [BytesLike, BytesLike[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "VerifyEthereumProof",
    values: [BytesLike, BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "VerifySubstrateProof",
    values: [BytesLike, BytesLike[], BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "ReadChildProofCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VerifyEthereumProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VerifySubstrateProof",
    data: BytesLike
  ): Result;
}

export interface MerklePatricia extends BaseContract {
  connect(runner?: ContractRunner | null): MerklePatricia;
  waitForDeployment(): Promise<this>;

  interface: MerklePatriciaInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ReadChildProofCheck: TypedContractMethod<
    [
      root: BytesLike,
      proof: BytesLike[],
      keys: BytesLike[],
      childInfo: BytesLike
    ],
    [StorageValueStructOutput[]],
    "view"
  >;

  VerifyEthereumProof: TypedContractMethod<
    [root: BytesLike, proof: BytesLike[], keys: BytesLike[]],
    [StorageValueStructOutput[]],
    "view"
  >;

  VerifySubstrateProof: TypedContractMethod<
    [root: BytesLike, proof: BytesLike[], keys: BytesLike[]],
    [StorageValueStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ReadChildProofCheck"
  ): TypedContractMethod<
    [
      root: BytesLike,
      proof: BytesLike[],
      keys: BytesLike[],
      childInfo: BytesLike
    ],
    [StorageValueStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "VerifyEthereumProof"
  ): TypedContractMethod<
    [root: BytesLike, proof: BytesLike[], keys: BytesLike[]],
    [StorageValueStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "VerifySubstrateProof"
  ): TypedContractMethod<
    [root: BytesLike, proof: BytesLike[], keys: BytesLike[]],
    [StorageValueStructOutput[]],
    "view"
  >;

  filters: {};
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type StateCommitmentStruct = {
  timestamp: BigNumberish;
  overlayRoot: BytesLike;
  stateRoot: BytesLike;
};

export type StateCommitmentStructOutput = [
  timestamp: bigint,
  overlayRoot: string,
  stateRoot: string
] & { timestamp: bigint; overlayRoot: string; stateRoot: string };

export type IntermediateStateStruct = {
  stateMachineId: BigNumberish;
  height: BigNumberish;
  commitment: StateCommitmentStruct;
};

export type IntermediateStateStructOutput = [
  stateMachineId: bigint,
  height: bigint,
  commitment: StateCommitmentStructOutput
] & {
  stateMachineId: bigint;
  height: bigint;
  commitment: StateCommitmentStructOutput;
};

export interface IConsensusClientInterface extends Interface {
  getFunction(nameOrSignature: "verifyConsensus"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifyConsensus",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyConsensus",
    data: BytesLike
  ): Result;
}

export interface IConsensusClient extends BaseContract {
  connect(runner?: ContractRunner | null): IConsensusClient;
  waitForDeployment(): Promise<this>;

  interface: IConsensusClientInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verifyConsensus: TypedContractMethod<
    [trustedState: BytesLike, proof: BytesLike],
    [[string, IntermediateStateStructOutput]],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verifyConsensus"
  ): TypedContractMethod<
    [trustedState: BytesLike, proof: BytesLike],
    [[string, IntermediateStateStructOutput]],
    "nonpayable"
  >;

  filters: {};
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  EthereumTrieDB,
  EthereumTrieDBInterface,
} from "../../../../solidity-merkle-trees/trie/ethereum/EthereumTrieDB";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isEmpty",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isLeaf",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isHashedLeaf",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isNibbledValueBranch",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isNibbledHashedValueBranch",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isNibbledBranch",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isExtension",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isBranch",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "nibbleSize",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "offset",
                type: "uint256",
              },
            ],
            internalType: "struct ByteSlice",
            name: "data",
            type: "tuple",
          },
        ],
        internalType: "struct NodeKind",
        name: "node",
        type: "tuple",
      },
    ],
    name: "decodeBranch",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "isSome",
                type: "bool",
              },
              {
                components: [
                  {
                    internalType: "bool",
                    name: "isHash",
                    type: "bool",
                  },
                  {
                    internalType: "bytes32",
                    name: "hash",
                    type: "bytes32",
                  },
                  {
                    internalType: "bool",
                    name: "isInline",
                    type: "bool",
                  },
                  {
                    internalType: "bytes",
                    name: "inLine",
                    type: "bytes",
                  },
                ],
                internalType: "struct NodeHandle",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct NodeHandleOption",
            name: "value",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "isSome",
                type: "bool",
              },
              {
                components: [
                  {
                    internalType: "bool",
                    name: "isHash",
                    type: "bool",
                  },
                  {
                    internalType: "bytes32",
                    name: "hash",
                    type: "bytes32",
                  },
                  {
                    internalType: "bool",
                    name: "isInline",
                    type: "bool",
                  },
                  {
                    internalType: "bytes",
                    name: "inLine",
                    type: "bytes",
                  },
                ],
                internalType: "struct NodeHandle",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct NodeHandleOption[16]",
            name: "children",
            type: "tuple[16]",
          },
        ],
        internalType: "struct Branch",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isEmpty",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isLeaf",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isHashedLeaf",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isNibbledValueBranch",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isNibbledHashedValueBranch",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isNibbledBranch",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isExtension",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isBranch",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "nibbleSize",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "offset",
                type: "uint256",
              },
            ],
            internalType: "struct ByteSlice",
            name: "data",
            type: "tuple",
          },
        ],
        internalType: "struct NodeKind",
        name: "node",
        type: "tuple",
      },
    ],
    name: "decodeExtension",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "offset",
                type: "uint256",
              },
            ],
            internalType: "struct NibbleSlice",
            name: "key",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "isHash",
                type: "bool",
              },
              {
                internalType: "bytes32",
                name: "hash",
                type: "bytes32",
              },
              {
                internalType: "bool",
                name: "isInline",
                type: "bool",
              },
              {
                internalType: "bytes",
                name: "inLine",
                type: "bytes",
              },
            ],
            internalType: "struct NodeHandle",
            name: "node",
            type: "tuple",
          },
        ],
        internalType: "struct Extension",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isEmpty",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isLeaf",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isHashedLeaf",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isNibbledValueBranch",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isNibbledHashedValueBranch",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isNibbledBranch",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isExtension",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isBranch",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "nibbleSize",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "offset",
                type: "uint256",
              },
            ],
            internalType: "struct ByteSlice",
            name: "data",
            type: "tuple",
          },
        ],
        internalType: "struct NodeKind",
        name: "node",
        type: "tuple",
      },
    ],
    name: "decodeLeaf",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "offset",
                type: "uint256",
              },
            ],
            internalType: "struct NibbleSlice",
            name: "key",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "isHash",
                type: "bool",
              },
              {
                internalType: "bytes32",
                name: "hash",
                type: "bytes32",
              },
              {
                internalType: "bool",
                name: "isInline",
                type: "bool",
              },
              {
                internalType: "bytes",
                name: "inLine",
                type: "bytes",
              },
            ],
            internalType: "struct NodeHandle",
            name: "value",
            type: "tuple",
          },
        ],
        internalType: "struct Leaf",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encoded",
        type: "bytes",
      },
    ],
    name: "decodeNodeKind",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isEmpty",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isLeaf",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isHashedLeaf",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isNibbledValueBranch",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isNibbledHashedValueBranch",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isNibbledBranch",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isExtension",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isBranch",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "nibbleSize",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "offset",
                type: "uint256",
              },
            ],
            internalType: "struct ByteSlice",
            name: "data",
            type: "tuple",
          },
        ],
        internalType: "struct NodeKind",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6113f561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806391648ac51461005b578063a948b67014610084578063ba1daf93146100a4578063cbef80f1146100b7575b600080fd5b61006e610069366004610e8c565b6100d7565b60405161007b9190610f38565b60405180910390f35b610097610092366004611067565b61026b565b60405161007b91906111d1565b6100976100b2366004611067565b61034b565b6100ca6100c5366004611067565b610410565b60405161007b9190611205565b6100df610c81565b6100e7610c81565b6000604051806040016040528085815260200160008152509050610140846040518060400160405280602081526020017f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b42181525061063a565b1561015057506001815292915050565b600061018b6101868660408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b61066c565b805190915060008190036101a6575050600182525092915050565b8060020361020d5760006101d3836000815181106101c6576101c6611274565b6020026020010151610782565b602081015190915060fc1c60028114806101ed5750806003145b156101fe5760016020870152610206565b600160c08701525b505061025d565b8060110361022157600160e085015261025d565b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964206461746160a01b60448201526064015b60405180910390fd5b505061012082015292915050565b610273610ce7565b61027b610ce7565b6101208301515160408051808201825260008082526020918201819052825180840190935283518352928101908201526102b49061066c565b905060006102ce826001815181106101c6576101c6611274565b905060405180604001604052806102fb6102f4856000815181106101c6576101c6611274565b6001610800565b8152600060209182015290845260408051608081019091526001815290810161032383610838565b8152600060208083018290526040805192835282820181529092015284015250909392505050565b610353610ce7565b61035b610ce7565b6101208301515160408051808201825260008082526020918201819052825180840190935283518352928101908201526103949061066c565b905060006103ae826001815181106101c6576101c6611274565b905060405180604001604052806103d46102f4856000815181106101c6576101c6611274565b81526000602091820181905291855260408051608081018252838152808301939093526001908301526060820192909252908301525092915050565b610418610d38565b610420610d38565b6101208301515160408051808201825260008082526020918201819052825180840190935283518352928101908201526104599061066c565b9050610463610d54565b60005b601081101561056b5760006104868483815181106101c6576101c6611274565b905080516020146104ee5760408051808201825260008082528251608081018452818152602080820183905281850183905284519283528281019094526060810191909152918101919091528383601081106104e4576104e4611274565b6020020152610558565b60006104f982610838565b6040805180820182526001808252825160808101845290815260208082018590526000828501819052845190815280820190945260608201939093529181019190915290915084846010811061055157610551611274565b6020020152505b5080610563816112a0565b915050610466565b5061058a610585836010815181106101c6576101c6611274565b6108a0565b156105d7576040805180820182526000808252825160808101845281815260208082018390528185018390528451928352828101909452606081019190915291810191909152835261062e565b604051806040016040528060011515815260200160405180608001604052806000151581526020016000801b8152602001600115158152602001610627866010815181106101c6576101c6611274565b9052905283525b60208301525092915050565b6000815183511461064d57506000610666565b825160208381018281209186019283209091145b925050505b92915050565b60606106778261090b565b61068057600080fd5b600061068b83610946565b905060008167ffffffffffffffff8111156106a8576106a8610dbf565b6040519080825280602002602001820160405280156106ed57816020015b60408051808201909152600080825260208201528152602001906001900390816106c65790505b50905060006106ff85602001516109cb565b856020015161070e91906112b9565b90506000805b848110156107775761072583610a4d565b915060405180604001604052808381526020018481525084828151811061074e5761074e611274565b602090810291909101015261076382846112b9565b92508061076f816112a0565b915050610714565b509195945050505050565b805160609061079057600080fd5b60008061079c84610af6565b9150915060008167ffffffffffffffff8111156107bb576107bb610dbf565b6040519080825280601f01601f1916602001820160405280156107e5576020820181803683370190505b509050602081016107f7848285610b3d565b50949350505050565b6060825182111561081057600080fd5b600082845161081f91906112cc565b90506020840161066161083285836112b9565b83610bc0565b60006020825110156108985760405162461bcd60e51b8152602060048201526024808201527f42797465733a3a20746f427974657333323a206461746120697320746f20736860448201526337b93a1760e11b6064820152608401610254565b506020015190565b60008082511180156106665750816000815181106108c0576108c0611274565b6020910101516001600160f81b031916600360fe1b14806106665750816000815181106108ef576108ef611274565b6020910101516001600160f81b031916600160ff1b1492915050565b8051600090810361091e57506000919050565b6020820151805160001a9060c082101561093c575060009392505050565b5060019392505050565b8051600090810361095957506000919050565b60008061096984602001516109cb565b846020015161097891906112b9565b905060008460000151856020015161099091906112b9565b90505b808210156109c2576109a482610a4d565b6109ae90836112b9565b9150826109ba816112a0565b935050610993565b50909392505050565b8051600090811a60808110156109e45750600092915050565b60b88110806109ff575060c081108015906109ff575060f881105b15610a0d5750600192915050565b60c0811015610a4157610a22600160b86112df565b610a2f9060ff16826112cc565b610a3a9060016112b9565b9392505050565b610a22600160f86112df565b80516000908190811a6080811015610a685760019150610aef565b60b8811015610a8e57610a7c6080826112cc565b610a879060016112b9565b9150610aef565b60c0811015610abb5760b78103600185019450806020036101000a85510460018201810193505050610aef565b60f8811015610acf57610a7c60c0826112cc565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b6000806000610b0884602001516109cb565b90506000818560200151610b1c91906112b9565b90506000828660000151610b3091906112cc565b9196919550909350505050565b80600003610b4a57505050565b60208110610b825782518252610b616020846112b9565b9250610b6e6020836112b9565b9150610b7b6020826112cc565b9050610b4a565b8015610bbb5760006001610b978360206112cc565b610ba3906101006113dc565b610bad91906112cc565b845184518216911916178352505b505050565b60608167ffffffffffffffff811115610bdb57610bdb610dbf565b6040519080825280601f01601f191660200182016040528015610c05576020820181803683370190505b50905060208101610aef8482855b60208110610c4b5782518252610c2a6020836112b9565b9150610c376020846112b9565b9250610c446020826112cc565b9050610c13565b60008115610c7b576001610c608360206112cc565b610c6c906101006113dc565b610c7691906112cc565b610bad565b50505050565b60408051610140810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905260e084018390526101008401839052845180860190955284528301529061012082015290565b905290565b6040518060400160405280610d0f604051806040016040528060608152602001600081525090565b815260408051608081018252600080825260208281018290529282015260608082015291015290565b6040518060400160405280610d4b610d82565b8152602001610ce25b6040518061020001604052806010905b610d6c610d82565b815260200190600190039081610d645790505090565b6040518060400160405280600015158152602001610ce2604080516080810182526000808252602082018190529181019190915260608082015290565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610df957610df9610dbf565b60405290565b600082601f830112610e1057600080fd5b813567ffffffffffffffff80821115610e2b57610e2b610dbf565b604051601f8301601f19908116603f01168101908282118183101715610e5357610e53610dbf565b81604052838152866020858801011115610e6c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610e9e57600080fd5b813567ffffffffffffffff811115610eb557600080fd5b610ec184828501610dff565b949350505050565b6000815180845260005b81811015610eef57602081850181015186830182015201610ed3565b506000602082860101526020601f19601f83011685010191505092915050565b6000815160408452610f246040850182610ec9565b602093840151949093019390935250919050565b60208152610f4b60208201835115159052565b60006020830151610f60604084018215159052565b5060408301518015156060840152506060830151801515608084015250608083015180151560a08401525060a083015180151560c08401525060c083015180151560e08401525060e0830151610100610fbc8185018315159052565b84015161012084810191909152840151610140808501529050610ec1610160840182610f0f565b80358015158114610ff357600080fd5b919050565b60006040828403121561100a57600080fd5b6040516040810167ffffffffffffffff828210818311171561102e5761102e610dbf565b81604052829350843591508082111561104657600080fd5b5061105385828601610dff565b825250602083013560208201525092915050565b60006020828403121561107957600080fd5b813567ffffffffffffffff8082111561109157600080fd5b9083019061014082860312156110a657600080fd5b6110ae610dd5565b6110b783610fe3565b81526110c560208401610fe3565b60208201526110d660408401610fe3565b60408201526110e760608401610fe3565b60608201526110f860808401610fe3565b608082015261110960a08401610fe3565b60a082015261111a60c08401610fe3565b60c082015261112b60e08401610fe3565b60e08201526101008381013590820152610120808401358381111561114f57600080fd5b61115b88828701610ff8565b918301919091525095945050505050565b805115158252602081015160208301526040810151151560408301526000606082015160806060850152610ec16080850182610ec9565b60008151604084526111b86040850182610f0f565b905060208301518482036020860152610661828261116c565b602081526000610a3a60208301846111a3565b8051151582526000602082015160406020850152610ec1604085018261116c565b60006020808352835160408285015261122160608501826111e4565b85830151858203601f1901604087015290915081610200810160005b60108110156112685784820383526112568285516111e4565b9386019392860192915060010161123d565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016112b2576112b261128a565b5060010190565b808201808211156106665761066661128a565b818103818111156106665761066661128a565b60ff82811682821603908111156106665761066661128a565b600181815b808511156113335781600019048211156113195761131961128a565b8085161561132657918102915b93841c93908002906112fd565b509250929050565b60008261134a57506001610666565b8161135757506000610666565b816001811461136d576002811461137757611393565b6001915050610666565b60ff8411156113885761138861128a565b50506001821b610666565b5060208310610133831016604e8410600b84101617156113b6575081810a610666565b6113c083836112f8565b80600019048211156113d4576113d461128a565b029392505050565b6000610a3a838361133b56fea164736f6c6343000811000a";

type EthereumTrieDBConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EthereumTrieDBConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EthereumTrieDB__factory extends ContractFactory {
  constructor(...args: EthereumTrieDBConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EthereumTrieDB & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EthereumTrieDB__factory {
    return super.connect(runner) as EthereumTrieDB__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EthereumTrieDBInterface {
    return new Interface(_abi) as EthereumTrieDBInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EthereumTrieDB {
    return new Contract(address, _abi, runner) as unknown as EthereumTrieDB;
  }
}

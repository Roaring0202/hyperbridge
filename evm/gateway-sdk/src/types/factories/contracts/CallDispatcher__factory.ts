/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  CallDispatcher,
  CallDispatcherInterface,
} from "../../contracts/CallDispatcher";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "dispatch",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610238806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637fa0e44b14610030575b600080fd5b61004361003e366004610106565b61005a565b6040516100519291906101dd565b60405180910390f35b60606000843b63ffffffff8116156100fc57856001600160a01b03168585604051610086929190610201565b6000604051808303816000865af19150503d80600081146100c3576040519150601f19603f3d011682016040523d82523d6000602084013e6100c8565b606091505b509350915082826100f55760405162461bcd60e51b81526004016100ec9190610211565b60405180910390fd5b50506100fe565b505b935093915050565b60008060006040848603121561011b57600080fd5b83356001600160a01b038116811461013257600080fd5b9250602084013567ffffffffffffffff8082111561014f57600080fd5b818601915086601f83011261016357600080fd5b81358181111561017257600080fd5b87602082850101111561018457600080fd5b6020830194508093505050509250925092565b6000815180845260005b818110156101bd576020818501810151868301820152016101a1565b506000602082860101526020601f19601f83011685010191505092915050565b6040815260006101f06040830185610197565b905082151560208301529392505050565b8183823760009101908152919050565b6020815260006102246020830184610197565b939250505056fea164736f6c6343000811000a";

type CallDispatcherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CallDispatcherConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CallDispatcher__factory extends ContractFactory {
  constructor(...args: CallDispatcherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CallDispatcher & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CallDispatcher__factory {
    return super.connect(runner) as CallDispatcher__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallDispatcherInterface {
    return new Interface(_abi) as CallDispatcherInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CallDispatcher {
    return new Contract(address, _abi, runner) as unknown as CallDispatcher;
  }
}
